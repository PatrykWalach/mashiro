### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Activity implements AnitomyResult {
  animeTitle: String
  className: String!
  episodeNumber: String
  fileExtension: String
  fileName: String!
  id: Int!
  media: Media
  status: ActivityStatus!
  subgroup: String
  updatedAt: DateTime!
  videoResolution: String
}

enum ActivityStatus {
  UPDATED
  WATCHED
  WATCHING
}

type ActivityUpdate {
  id: Int!
  status: ActivityStatus!
  updatedAt: String!
}

input ActivityWhereUniqueInput {
  id: Int
}

"""
mapped AnitomyResult from [anitomy-js](https://github.com/skiptirengu/anitomy-js)
"""
interface AnitomyResult {
  animeTitle: String
  episodeNumber: String
  fileExtension: String
  fileName: String!
  subgroup: String
  videoResolution: String
}

scalar DateTime

type FeedItem implements AnitomyResult {
  animeTitle: String
  category: String
  categoryId: String
  comments: Int
  description: String
  downloads: Int
  episodeNumber: String
  fileExtension: String
  fileName: String!
  id: String
  infoHash: String
  leechers: Int
  link: String
  pubDate: String
  remake: Boolean
  seeders: Int
  size: String
  subgroup: String
  trusted: Boolean
  videoResolution: String
}

type File implements AnitomyResult {
  animeTitle: String
  episodeNumber: String
  fileExtension: String
  fileName: String!
  id: ID!
  media: Media
  path: String!
  subgroup: String
  videoResolution: String
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Media {
  episodeOffset: Int
  files: [File]!
  id: Int!
}

type Mutation {
  createActivity(className: String!, fullTitle: String!): Activity
  finishActivity(id: Int!): Activity
  updateActivityMedia(id: Int!, mediaId: Int!): Activity
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Query {
  activities(after: ActivityWhereUniqueInput, before: ActivityWhereUniqueInput, first: Int, last: Int, orderBy: [QueryActivitiesOrderByInput!], where: QueryActivitiesWhereInput): [Activity!]!

  """Rss feed"""
  feed(
    """Rss feed url"""
    uri: String!
  ): [FeedItem!]
  media(where: QueryMediaWhereInput): [Media!]!
  users(where: QueryUsersWhereInput): [User!]!
}

input QueryActivitiesOrderByInput {
  id: SortOrder
  updatedAt: SortOrder
}

input QueryActivitiesWhereInput {
  status: IntFilter
}

input QueryMediaWhereInput {
  id: IntFilter
}

input QueryUsersWhereInput {
  id: IntFilter
}

enum SortOrder {
  asc
  desc
}

type Subscription {
  activityAdded: Activity
  activityUpdated: ActivityUpdate
}

type User {
  id: Int!
  preferredRssFeedUri: String
}
