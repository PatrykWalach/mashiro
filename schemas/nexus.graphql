### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  id: Int!
  service: String!
  token: String!
}

input AccountAccountByServiceAndUserIdCompoundUniqueInput {
  service: String!
  userId: Int!
}

input AccountCreateInput {
  accountUserId: Int!
  listEntries: ListEntryCreateNestedManyWithoutAccountInput
  serviceEnum: ServiceEnumCreateNestedOneWithoutAccountsInput!
  token: String!
}

input AccountCreateNestedManyWithoutServiceEnumInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutServiceEnumInput!]
  create: [AccountCreateWithoutServiceEnumInput!]
}

input AccountCreateNestedManyWithoutUserInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
}

input AccountCreateNestedOneWithoutListEntriesInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutListEntriesInput
  create: AccountCreateWithoutListEntriesInput
}

input AccountCreateOrConnectWithoutListEntriesInput {
  create: AccountCreateWithoutListEntriesInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutServiceEnumInput {
  create: AccountCreateWithoutServiceEnumInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateWithoutListEntriesInput {
  accountUserId: Int!
  serviceEnum: ServiceEnumCreateNestedOneWithoutAccountsInput!
  token: String!
}

input AccountCreateWithoutServiceEnumInput {
  accountUserId: Int!
  listEntries: ListEntryCreateNestedManyWithoutAccountInput
  token: String!
}

input AccountCreateWithoutUserInput {
  accountUserId: Int!
  listEntries: ListEntryCreateNestedManyWithoutAccountInput
  serviceEnum: ServiceEnumCreateNestedOneWithoutAccountsInput!
  token: String!
}

input AccountListRelationFilter {
  every: AccountWhereInput
  none: AccountWhereInput
  some: AccountWhereInput
}

input AccountOrderByInput {
  accountUserId: SortOrder
  id: SortOrder
  service: SortOrder
  serviceEnum: ServiceEnumOrderByInput
  token: SortOrder
  userId: SortOrder
}

input AccountWhereInput {
  accountUserId: IntFilter
  AND: [AccountWhereInput!]
  id: IntFilter
  listEntries: ListEntryListRelationFilter
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  service: StringFilter
  serviceEnum: ServiceEnumWhereInput
  token: StringFilter
  userId: IntFilter
}

input AccountWhereUniqueInput {
  accountByServiceAndUserId: AccountAccountByServiceAndUserIdCompoundUniqueInput
  id: Int
}

type Anime {
  coverImage: String
  episodes: Int
  id: Int!
  serviceId: Int!
  title: String!
}

input AnimeAnimeByServiceAndTitleCompoundUniqueInput {
  service: String!
  title: String!
}

input AnimeAnimeByServiceCompoundUniqueInput {
  service: String!
  serviceId: Int!
}

input AnimeCreateNestedManyWithoutServiceEnumInput {
  connect: [AnimeWhereUniqueInput!]
  connectOrCreate: [AnimeCreateOrConnectWithoutServiceEnumInput!]
  create: [AnimeCreateWithoutServiceEnumInput!]
}

input AnimeCreateNestedOneWithoutListEntriesInput {
  connect: AnimeWhereUniqueInput
  connectOrCreate: AnimeCreateOrConnectWithoutListEntriesInput
  create: AnimeCreateWithoutListEntriesInput
}

input AnimeCreateOrConnectWithoutListEntriesInput {
  create: AnimeCreateWithoutListEntriesInput!
  where: AnimeWhereUniqueInput!
}

input AnimeCreateOrConnectWithoutServiceEnumInput {
  create: AnimeCreateWithoutServiceEnumInput!
  where: AnimeWhereUniqueInput!
}

input AnimeCreateWithoutListEntriesInput {
  anilistUrl: String
  coverImage: String
  episodes: Int
  serviceEnum: ServiceEnumCreateNestedOneWithoutAnimeInput!
  serviceId: Int!
  title: String!
}

input AnimeCreateWithoutServiceEnumInput {
  anilistUrl: String
  coverImage: String
  episodes: Int
  listEntries: ListEntryCreateNestedManyWithoutAnimeInput
  serviceId: Int!
  title: String!
}

input AnimeListRelationFilter {
  every: AnimeWhereInput
  none: AnimeWhereInput
  some: AnimeWhereInput
}

input AnimeOrderByInput {
  anilistUrl: SortOrder
  coverImage: SortOrder
  episodes: SortOrder
  id: SortOrder
  service: SortOrder
  serviceEnum: ServiceEnumOrderByInput
  serviceId: SortOrder
  title: SortOrder
}

input AnimeWhereInput {
  AND: [AnimeWhereInput!]
  anilistUrl: StringNullableFilter
  coverImage: StringNullableFilter
  episodes: IntNullableFilter
  id: IntFilter
  listEntries: ListEntryListRelationFilter
  NOT: [AnimeWhereInput!]
  OR: [AnimeWhereInput!]
  service: StringFilter
  serviceEnum: ServiceEnumWhereInput
  serviceId: IntFilter
  title: StringFilter
}

input AnimeWhereUniqueInput {
  animeByService: AnimeAnimeByServiceCompoundUniqueInput
  animeByServiceAndTitle: AnimeAnimeByServiceAndTitleCompoundUniqueInput
  id: Int
}

scalar DateTime

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type ListEntry {
  anime: Anime!
  completedAt: DateTime
  id: Int!
  progress: Int!
  score: Float!
  startedAt: DateTime
  status: String!
}

input ListEntryCreateNestedManyWithoutAccountInput {
  connect: [ListEntryWhereUniqueInput!]
  connectOrCreate: [ListEntryCreateOrConnectWithoutAccountInput!]
  create: [ListEntryCreateWithoutAccountInput!]
}

input ListEntryCreateNestedManyWithoutAnimeInput {
  connect: [ListEntryWhereUniqueInput!]
  connectOrCreate: [ListEntryCreateOrConnectWithoutAnimeInput!]
  create: [ListEntryCreateWithoutAnimeInput!]
}

input ListEntryCreateNestedManyWithoutServiceEnumInput {
  connect: [ListEntryWhereUniqueInput!]
  connectOrCreate: [ListEntryCreateOrConnectWithoutServiceEnumInput!]
  create: [ListEntryCreateWithoutServiceEnumInput!]
}

input ListEntryCreateNestedManyWithoutUserInput {
  connect: [ListEntryWhereUniqueInput!]
  connectOrCreate: [ListEntryCreateOrConnectWithoutUserInput!]
  create: [ListEntryCreateWithoutUserInput!]
}

input ListEntryCreateOrConnectWithoutAccountInput {
  create: ListEntryCreateWithoutAccountInput!
  where: ListEntryWhereUniqueInput!
}

input ListEntryCreateOrConnectWithoutAnimeInput {
  create: ListEntryCreateWithoutAnimeInput!
  where: ListEntryWhereUniqueInput!
}

input ListEntryCreateOrConnectWithoutServiceEnumInput {
  create: ListEntryCreateWithoutServiceEnumInput!
  where: ListEntryWhereUniqueInput!
}

input ListEntryCreateOrConnectWithoutUserInput {
  create: ListEntryCreateWithoutUserInput!
  where: ListEntryWhereUniqueInput!
}

input ListEntryCreateWithoutAccountInput {
  anime: AnimeCreateNestedOneWithoutListEntriesInput!
  completedAt: DateTime
  progress: Int
  score: Float
  serviceEnum: ServiceEnumCreateNestedOneWithoutListEntriesInput!
  startedAt: DateTime
  statusEnum: StatusEnumCreateNestedOneWithoutListEntriesInput
}

input ListEntryCreateWithoutAnimeInput {
  account: AccountCreateNestedOneWithoutListEntriesInput!
  completedAt: DateTime
  progress: Int
  score: Float
  serviceEnum: ServiceEnumCreateNestedOneWithoutListEntriesInput!
  startedAt: DateTime
  statusEnum: StatusEnumCreateNestedOneWithoutListEntriesInput
}

input ListEntryCreateWithoutServiceEnumInput {
  account: AccountCreateNestedOneWithoutListEntriesInput!
  anime: AnimeCreateNestedOneWithoutListEntriesInput!
  completedAt: DateTime
  progress: Int
  score: Float
  startedAt: DateTime
  statusEnum: StatusEnumCreateNestedOneWithoutListEntriesInput
}

input ListEntryCreateWithoutUserInput {
  account: AccountCreateNestedOneWithoutListEntriesInput!
  anime: AnimeCreateNestedOneWithoutListEntriesInput!
  completedAt: DateTime
  progress: Int
  score: Float
  serviceEnum: ServiceEnumCreateNestedOneWithoutListEntriesInput!
  startedAt: DateTime
  statusEnum: StatusEnumCreateNestedOneWithoutListEntriesInput
}

input ListEntryListRelationFilter {
  every: ListEntryWhereInput
  none: ListEntryWhereInput
  some: ListEntryWhereInput
}

input ListEntryOrderByInput {
  account: AccountOrderByInput
  accountId: SortOrder
  anime: AnimeOrderByInput
  completedAt: SortOrder
  id: SortOrder
  progress: SortOrder
  score: SortOrder
  service: SortOrder
  serviceEnum: ServiceEnumOrderByInput
  serviceId: SortOrder
  startedAt: SortOrder
  status: SortOrder
  statusEnum: StatusEnumOrderByInput
  userId: SortOrder
}

input ListEntryUserListEntryByAnimeAndServiceCompoundUniqueInput {
  accountId: Int!
  service: String!
  serviceId: Int!
  userId: Int!
}

input ListEntryWhereInput {
  account: AccountWhereInput
  accountId: IntFilter
  AND: [ListEntryWhereInput!]
  anime: AnimeWhereInput
  completedAt: DateTimeNullableFilter
  id: IntFilter
  NOT: [ListEntryWhereInput!]
  OR: [ListEntryWhereInput!]
  progress: IntFilter
  score: FloatFilter
  service: StringFilter
  serviceEnum: ServiceEnumWhereInput
  serviceId: IntFilter
  startedAt: DateTimeNullableFilter
  status: StringFilter
  statusEnum: StatusEnumWhereInput
  userId: IntFilter
}

input ListEntryWhereUniqueInput {
  id: Int
  userListEntryByAnimeAndService: ListEntryUserListEntryByAnimeAndServiceCompoundUniqueInput
}

type Mutation {
  createOneAccount(data: AccountCreateInput!): Account!
  createOneUser(data: UserCreateInput!): User!
  refreshUserListEntries: [ListEntry!]!
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  users(orderBy: [QueryUsersOrderByInput!], where: QueryUsersWhereInput): [User!]!
  viewer: User!
}

input QueryUsersOrderByInput {
  lastLoggedInAt: SortOrder
}

input QueryUsersWhereInput {
  name: StringFilter
}

input ServiceEnumCreateNestedOneWithoutAccountsInput {
  connect: ServiceEnumWhereUniqueInput
  connectOrCreate: ServiceEnumCreateOrConnectWithoutAccountsInput
  create: ServiceEnumCreateWithoutAccountsInput
}

input ServiceEnumCreateNestedOneWithoutAnimeInput {
  connect: ServiceEnumWhereUniqueInput
  connectOrCreate: ServiceEnumCreateOrConnectWithoutAnimeInput
  create: ServiceEnumCreateWithoutAnimeInput
}

input ServiceEnumCreateNestedOneWithoutListEntriesInput {
  connect: ServiceEnumWhereUniqueInput
  connectOrCreate: ServiceEnumCreateOrConnectWithoutListEntriesInput
  create: ServiceEnumCreateWithoutListEntriesInput
}

input ServiceEnumCreateOrConnectWithoutAccountsInput {
  create: ServiceEnumCreateWithoutAccountsInput!
  where: ServiceEnumWhereUniqueInput!
}

input ServiceEnumCreateOrConnectWithoutAnimeInput {
  create: ServiceEnumCreateWithoutAnimeInput!
  where: ServiceEnumWhereUniqueInput!
}

input ServiceEnumCreateOrConnectWithoutListEntriesInput {
  create: ServiceEnumCreateWithoutListEntriesInput!
  where: ServiceEnumWhereUniqueInput!
}

input ServiceEnumCreateWithoutAccountsInput {
  anime: AnimeCreateNestedManyWithoutServiceEnumInput
  listEntries: ListEntryCreateNestedManyWithoutServiceEnumInput
  value: String!
}

input ServiceEnumCreateWithoutAnimeInput {
  accounts: AccountCreateNestedManyWithoutServiceEnumInput
  listEntries: ListEntryCreateNestedManyWithoutServiceEnumInput
  value: String!
}

input ServiceEnumCreateWithoutListEntriesInput {
  accounts: AccountCreateNestedManyWithoutServiceEnumInput
  anime: AnimeCreateNestedManyWithoutServiceEnumInput
  value: String!
}

input ServiceEnumOrderByInput {
  id: SortOrder
  value: SortOrder
}

input ServiceEnumWhereInput {
  accounts: AccountListRelationFilter
  AND: [ServiceEnumWhereInput!]
  anime: AnimeListRelationFilter
  id: IntFilter
  listEntries: ListEntryListRelationFilter
  NOT: [ServiceEnumWhereInput!]
  OR: [ServiceEnumWhereInput!]
  value: StringFilter
}

input ServiceEnumWhereUniqueInput {
  id: Int
  value: String
}

enum SortOrder {
  asc
  desc
}

input StatusEnumCreateNestedOneWithoutListEntriesInput {
  connect: StatusEnumWhereUniqueInput
  connectOrCreate: StatusEnumCreateOrConnectWithoutListEntriesInput
  create: StatusEnumCreateWithoutListEntriesInput
}

input StatusEnumCreateOrConnectWithoutListEntriesInput {
  create: StatusEnumCreateWithoutListEntriesInput!
  where: StatusEnumWhereUniqueInput!
}

input StatusEnumCreateWithoutListEntriesInput {
  value: String!
}

input StatusEnumOrderByInput {
  id: SortOrder
  value: SortOrder
}

input StatusEnumWhereInput {
  AND: [StatusEnumWhereInput!]
  id: IntFilter
  listEntries: ListEntryListRelationFilter
  NOT: [StatusEnumWhereInput!]
  OR: [StatusEnumWhereInput!]
  value: StringFilter
}

input StatusEnumWhereUniqueInput {
  id: Int
  value: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  accounts: [Account!]!
  avatarUrl: String!
  id: Int!
  listEntries(after: ListEntryWhereUniqueInput, before: ListEntryWhereUniqueInput, first: Int, last: Int, orderBy: [ListEntryOrderByInput!], where: ListEntryWhereInput): [ListEntry!]!
  name: String!
  preferredRssFeedUri: String!
}

input UserCreateInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  avatarUrl: String
  lastLoggedInAt: DateTime
  listEntries: ListEntryCreateNestedManyWithoutUserInput
  name: String!
  preferredRssFeedUri: String
}
